//---------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2025-10-28 21:59:02 by fix8 v2.0.1 ***
//---------------------------------------------------------------------------------------------
// SPDX-License-Identifier: LGPL-3.0-or-later
// SPDX-PackageName: Fix8 Open Source FIX Engine
// SPDX-FileCopyrightText: Copyright (C) 2010-25 David L. Dight <fix@fix8.org>
// SPDX-FileType: SOURCE
// SPDX-Notice: >
//  Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.
//
//  Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
//  GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
//  version 3 of the License, or (at your option) any later version.
//
//  Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
//  even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//  You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
//  If not, see <https://www.gnu.org/licenses/>.
//
//  BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
//  THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
//  COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
//  KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
//  WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
//  THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
//  YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
//
//  IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
//  HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
//  ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
//  CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
//  NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
//  THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
//  HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
//---------------------------------------------------------------------------------------------
// For Production-Grade FIX Requirements:
//  If you're  using Fix8 Community Edition and find  yourself needing higher throughput, lower
//  latency, or enterprise-grade reliability,Fix8Pro offers a robust upgrade path. Built on the
//  same  core  technology, Fix8Pro adds performance optimizations for  high-volume  messaging,
//	 enhanced  API, professional  support  and  much  more â€”  making  it  ideal  for  production
//  deployments, low-latency trading, or  large-scale FIX  integrations.  It retains  near full
//  compatibility with  the Community Edition while providing  enhanced stability, scalability,
//  and  advanced  features  for demanding  environments.  If  your  project has  outgrown  the
//  Community  Edition's capabilities, you can find out and learn more about the Pro version at
//  www.fix8mt.com
//
//*********************************************************************************************
//*                 Special note for Fix8 compiler generated source code                      *
//*                                                                                           *
//* Binary works  that are  the results of compilation of code  that is generated by the Fix8 *
//* compiler  can be released  without releasing  your  source code as  long  as your  binary *
//* links dynamically  against an  unmodified version of the  Fix8 library.  You  are however *
//* required to leave the copyright text in the generated code.                               *
//*                                                                                           *
//*********************************************************************************************
//---------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 33554433L
#error fix8_types.hpp version 2.0.1 is out of date. Please regenerate with f8c.
#endif
//---------------------------------------------------------------------------------------------
// fix8_types.hpp
//---------------------------------------------------------------------------------------------
#ifndef FIX8_666978385F74797065732E687070_
#define FIX8_666978385F74797065732E687070_

namespace FIX8 {
namespace binance {

//---------------------------------------------------------------------------------------------
using BeginString = Field<f8String, 8>;
const f8String BeginString_FIX44("FIX.4.4");
constexpr size_t BeginString_realm_els(1);
//---------------------------------------------------------------------------------------------
using BodyLength = Field<Length, 9>;
//---------------------------------------------------------------------------------------------
using CheckSum = Field<f8String, 10>;
//---------------------------------------------------------------------------------------------
using Currency = Field<f8String, 15>;
//---------------------------------------------------------------------------------------------
using MsgSeqNum = Field<SeqNum, 34>;
//---------------------------------------------------------------------------------------------
using MsgType = Field<f8String, 35>;
const f8String MsgType_HEARTBEAT("0");
const f8String MsgType_TEST_REQUEST("1");
const f8String MsgType_REJECT("3");
const f8String MsgType_LOGOUT("5");
const f8String MsgType_LOGON("A");
const f8String MsgType_NEWS("B");
const f8String MsgType_MARKET_DATA_REQUEST("V");
const f8String MsgType_MARKET_DATA_SNAPSHOT("W");
const f8String MsgType_MARKET_DATA_INCREMENTAL_REFRESH("X");
const f8String MsgType_LIMIT_QUERY("XLQ");
const f8String MsgType_LIMIT_RESPONSE("XLR");
const f8String MsgType_MARKET_DATA_REQUEST_REJECT("Y");
const f8String MsgType_INSTRUMENT_LIST_REQUEST("x");
const f8String MsgType_INSTRUMENT_LIST("y");
constexpr size_t MsgType_realm_els(14);
//---------------------------------------------------------------------------------------------
using RefSeqNum = Field<int, 45>;
//---------------------------------------------------------------------------------------------
using SenderCompID = Field<f8String, 49>;
//---------------------------------------------------------------------------------------------
using SendingTime = Field<UTCTimestamp, 52>;
//---------------------------------------------------------------------------------------------
using Symbol = Field<f8String, 55>;
//---------------------------------------------------------------------------------------------
using TargetCompID = Field<f8String, 56>;
//---------------------------------------------------------------------------------------------
using Text = Field<f8String, 58>;
//---------------------------------------------------------------------------------------------
using TransactTime = Field<UTCTimestamp, 60>;
//---------------------------------------------------------------------------------------------
using RawDataLength = Field<Length, 95>;
//---------------------------------------------------------------------------------------------
using RawData = Field<data, 96>;
//---------------------------------------------------------------------------------------------
using EncryptMethod = Field<int, 98>;
constexpr int EncryptMethod_NONE(0);
constexpr size_t EncryptMethod_realm_els(1);
//---------------------------------------------------------------------------------------------
using HeartBtInt = Field<int, 108>;
//---------------------------------------------------------------------------------------------
using TestReqID = Field<f8String, 112>;
//---------------------------------------------------------------------------------------------
using ResetSeqNumFlag = Field<Boolean, 141>;
constexpr char ResetSeqNumFlag_NO('N');
constexpr char ResetSeqNumFlag_YES('Y');
constexpr size_t ResetSeqNumFlag_realm_els(2);
//---------------------------------------------------------------------------------------------
using NoRelatedSym = Field<NumInGroup, 146>;
//---------------------------------------------------------------------------------------------
using Headline = Field<f8String, 148>;
//---------------------------------------------------------------------------------------------
using MDReqID = Field<f8String, 262>;
//---------------------------------------------------------------------------------------------
using SubscriptionRequestType = Field<char, 263>;
constexpr char SubscriptionRequestType_Subscribe('1');
constexpr char SubscriptionRequestType_Unsubscribe('2');
constexpr size_t SubscriptionRequestType_realm_els(2);
//---------------------------------------------------------------------------------------------
using MarketDepth = Field<int, 264>;
//---------------------------------------------------------------------------------------------
using AggregatedBook = Field<Boolean, 266>;
constexpr char AggregatedBook_BOOK_ENTRIES_TO_BE_AGGREGATED('Y');
constexpr size_t AggregatedBook_realm_els(1);
//---------------------------------------------------------------------------------------------
using NoMDEntryTypes = Field<NumInGroup, 267>;
//---------------------------------------------------------------------------------------------
using NoMDEntries = Field<NumInGroup, 268>;
//---------------------------------------------------------------------------------------------
using MDEntryType = Field<char, 269>;
constexpr char MDEntryType_BID('0');
constexpr char MDEntryType_OFFER('1');
constexpr char MDEntryType_TRADE('2');
constexpr size_t MDEntryType_realm_els(3);
//---------------------------------------------------------------------------------------------
using MDEntryPx = Field<price, 270>;
//---------------------------------------------------------------------------------------------
using MDEntrySize = Field<Qty, 271>;
//---------------------------------------------------------------------------------------------
using MDUpdateAction = Field<char, 279>;
constexpr char MDUpdateAction_NEW('0');
constexpr char MDUpdateAction_CHANGE('1');
constexpr char MDUpdateAction_DELETE('2');
constexpr size_t MDUpdateAction_realm_els(3);
//---------------------------------------------------------------------------------------------
using MDReqRejReason = Field<char, 281>;
constexpr char MDReqRejReason_DUPLICATE_MDREQID('1');
constexpr char MDReqRejReason_TOO_MANY_SUBSCRIPTIONS('2');
constexpr size_t MDReqRejReason_realm_els(2);
//---------------------------------------------------------------------------------------------
using InstrumentReqID = Field<f8String, 320>;
//---------------------------------------------------------------------------------------------
using RefTagID = Field<int, 371>;
//---------------------------------------------------------------------------------------------
using RefMsgType = Field<f8String, 372>;
//---------------------------------------------------------------------------------------------
using SessionRejectReason = Field<int, 373>;
constexpr int SessionRejectReason_INVALID_TAG_NUMBER(0);
constexpr int SessionRejectReason_REQUIRED_TAG_MISSING(1);
constexpr int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE(2);
constexpr int SessionRejectReason_UNDEFINED_TAG(3);
constexpr int SessionRejectReason_VALUE_IS_INCORRECT(5);
constexpr int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE(6);
constexpr int SessionRejectReason_SIGNATURE_PROBLEM(8);
constexpr int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM(10);
constexpr int SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE(13);
constexpr int SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER(14);
constexpr int SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER(15);
constexpr int SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP(16);
constexpr int SessionRejectReason_OTHER(99);
constexpr size_t SessionRejectReason_realm_els(13);
//---------------------------------------------------------------------------------------------
using Username = Field<f8String, 553>;
//---------------------------------------------------------------------------------------------
using InstrumentListRequestType = Field<int, 559>;
constexpr int InstrumentListRequestType_SINGLE_INSTRUMENT(0);
constexpr int InstrumentListRequestType_ALL_INSTRUMENTS(4);
constexpr size_t InstrumentListRequestType_realm_els(2);
//---------------------------------------------------------------------------------------------
using MinTradeVol = Field<Qty, 562>;
//---------------------------------------------------------------------------------------------
using LastFragment = Field<Boolean, 893>;
constexpr char LastFragment_NOT_LAST_MESSAGE('N');
constexpr char LastFragment_LAST_MESSAGE('Y');
constexpr size_t LastFragment_realm_els(2);
//---------------------------------------------------------------------------------------------
using MinPriceIncrement = Field<price, 969>;
//---------------------------------------------------------------------------------------------
using TradeID = Field<int, 1003>;
//---------------------------------------------------------------------------------------------
using MaxTradeVol = Field<Qty, 1140>;
//---------------------------------------------------------------------------------------------
using AggressorSide = Field<char, 2446>;
constexpr char AggressorSide_BUY('1');
constexpr char AggressorSide_SELL('2');
constexpr size_t AggressorSide_realm_els(2);
//---------------------------------------------------------------------------------------------
using ReqID = Field<f8String, 6136>;
//---------------------------------------------------------------------------------------------
using RecvWindow = Field<int, 25000>;
//---------------------------------------------------------------------------------------------
using NoLimitIndicators = Field<NumInGroup, 25003>;
//---------------------------------------------------------------------------------------------
using LimitType = Field<char, 25004>;
constexpr char LimitType_MESSAGE_LIMIT('2');
constexpr char LimitType_SUBSCRIPTION_LIMIT('3');
constexpr size_t LimitType_realm_els(2);
//---------------------------------------------------------------------------------------------
using LimitCount = Field<int, 25005>;
//---------------------------------------------------------------------------------------------
using LimitMax = Field<int, 25006>;
//---------------------------------------------------------------------------------------------
using LimitResetInterval = Field<int, 25007>;
//---------------------------------------------------------------------------------------------
using LimitResetIntervalResolution = Field<char, 25008>;
constexpr char LimitResetIntervalResolution_DAY('d');
constexpr char LimitResetIntervalResolution_HOUR('h');
constexpr char LimitResetIntervalResolution_MINUTE('m');
constexpr char LimitResetIntervalResolution_SECOND('s');
constexpr size_t LimitResetIntervalResolution_realm_els(4);
//---------------------------------------------------------------------------------------------
using ErrorCode = Field<int, 25016>;
//---------------------------------------------------------------------------------------------
using MessageHandling = Field<int, 25035>;
constexpr int MessageHandling_UNORDERED(1);
constexpr int MessageHandling_SEQUENTIAL(2);
constexpr size_t MessageHandling_realm_els(2);
//---------------------------------------------------------------------------------------------
using UUID = Field<f8String, 25037>;
//---------------------------------------------------------------------------------------------
using MinQtyIncrement = Field<Qty, 25039>;
//---------------------------------------------------------------------------------------------
using MarketMinTradeVol = Field<Qty, 25040>;
//---------------------------------------------------------------------------------------------
using MarketMaxTradeVol = Field<Qty, 25041>;
//---------------------------------------------------------------------------------------------
using MarketMinQtyIncrement = Field<Qty, 25042>;
//---------------------------------------------------------------------------------------------
using FirstBookUpdateID = Field<int, 25043>;
//---------------------------------------------------------------------------------------------
using LastBookUpdateID = Field<int, 25044>;
//---------------------------------------------------------------------------------------------
using fix8_BaseEntry = FieldTable;

} // namespace binance
} // namespace FIX8
#endif // FIX8_666978385F74797065732E687070_
